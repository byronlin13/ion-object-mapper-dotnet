name: byron CI Release

on: workflow_dispatch

jobs:
  

  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/')
    needs: [test]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ] 
        dotnet: ['5.0.x']
      
    steps:
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-external-id: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
          role-duration-seconds: 900
          
      - name: Wait / Sleep
        uses: jakejarvis/wait-action@v0.1.1
      - name: Git Checkout
        uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet }}
        
      - name: Sign
        shell: powershell
        run: |
          dotnet build --configuration Release
          
          # Push unsigned DLL to S3
          version_id=$( aws s3api put-object --bucket ${{ secrets.AWS_UNSIGNED_BUCKET }} --key ${{ secrets.AWS_KEY }} --body Amazon.IonObjectMapper/bin/Release/net5.0/Amazon.IonObjectMapper.dll  --acl bucket-owner-full-control | jq '.VersionId' )
          
          # Wait 5 seconds for job ID tag to be populated in S3 object
          sleep 5s
          
          # Get job ID
          job_id=$( aws s3api get-object-tagging --bucket ${{ secrets.AWS_UNSIGNED_BUCKET }} --key ${{ secrets.AWS_KEY }} --version-id ${version_id} | jq -r '.TagSet[0].Value' )
                  
          # Poll signed S3 bucket to see if the signed artifact is there
          aws s3api wait object-exists --bucket ${{ secrets.AWS_SIGNED_BUCKET }} --key ${{ secrets.AWS_KEY }}-${job_id}
          # Get signed DLL from S3
          aws s3api get-object --bucket ${{ secrets.AWS_SIGNED_BUCKET }} --key ${{ secrets.AWS_KEY }}-${job_id} Amazon.IonObjectMapper/bin/Release/net5.0/Amazon.IonObjectMapper.dll
      - uses: actions/upload-artifact@v2
        with:
          name: signed-dll
          path: Amazon.IonObjectMapper/bin/Release/net5.0/Amazon.IonObjectMapper.dll
          
#       - name: Publish to NuGet
#         run: | 
#           dotnet pack --no-build
#           dotnet nuget push Amazon.IonObjectMapper/bin/Release/Amazon.IonObjectMapper.*.nupkg --api-key ${{ secrets.AWS_NUGET_KEY }} --source https://api.nuget.org/v3/index.json
